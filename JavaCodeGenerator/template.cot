<@SCRIPT
var gIndent = "    ";
var gCommentStart = "/**\n";
var gCommentPrefix = " * ";
var gCommentEnd = " */\n";
var candidateClass = getArgument("TargetClass");
var startLine = getArgument("CodeStartMarkLine");
var endLine = getArgument("CodeEndMarkLine");
var target = getArgument("target");

var packageInfo = "";
var importsList = "";

CodeFactory = {};

CodeFactory.getSourceCode = function(source) {
    var sourceCode = "";
    var type = "";
    switch(source.GetClassName()){
        case "UMLClass":
            type = "class";
            break;
        case "UMLInterface":
            type = "interface"
            break;
        case "UMLEnumeration":
        case "UMLException":
        case "UMLSignal":

        default:
    }

    if (type != "") {
        sourceCode = CodeFactory.getOOSourceCode(source, type);
    }
    
    return sourceCode;
}

CodeFactory.getFileName = function(source) {
    var path = getTarget() + "\\";
    //println("CodeFactory.getFileName.Pathname " + source.Pathname);
    var names = source.Pathname.split("::");
    for (i=2; i<names.length; i++) {
        if (names[i] == source.Name) {
            return path + "\\" + source.Name + ".java";
        }

        path = path + "\\" + names[i];
        if (packageInfo != "") {
            packageInfo += ".";
        }
        packageInfo += names[i];
        if (!folderExists(path)) {
            createFolder(path);
        }
    }
}

CodeFactory.getOOSourceCode = function(source, type) {
    var sourceCode = CodeFactory.comment(source, "");
    sourceCode += gCommentEnd;

    var geners = CodeFactory.getGeneralization(source);
    var impIfs = CodeFactory.getImplInterface(source);
    CodeFactory.genAssociatedImportList(source);
    var attrs = CodeFactory.getAttrsCode(source, gIndent);
    var methods = CodeFactory.getMethodsCode(source, type, gIndent);

    if (type == "interface") {
        return sourceCode + "public interface " + source.Name 
            +  " " + geners + "{\n" + attrs + methods + "}";
    }
    return sourceCode +"public class " + source.Name + " " 
        + geners + impIfs + "{\n" + attrs + methods + "}";
}

CodeFactory.getGeneralization = function(source) {
    var sourceCode = "";
    var n = source.GetGeneralizationCount();

    for (i = 0;  i < n; i++) {
        gener = source.GetGeneralizationAt(i);

        if (source.Name == gener.Child.Name) {
            CodeFactory.importPackage(gener.Parent.Pathname);
            return "extends " + gener.Parent.Name + " ";
        }
    }
    return sourceCode;
}

CodeFactory.getImplInterface = function(source) {
    var sourceCode = "";
    var n = source.GetClientDependencyCount();
    
    for (i = 0;  i < n; i++) {
        depen = source.GetClientDependencyAt(i);
        if (depen.GetClassName() != "UMLRealization") {
            continue;
        }

        if (sourceCode != "") {
            sourceCode += ", ";
        }
        
        sourceCode += depen.Supplier.Name;
        CodeFactory.importPackage(depen.Supplier.Pathname);
    }

    if (sourceCode == "") {
        return "";
    }
    return "implements " + sourceCode + " ";
}

CodeFactory.genAssociatedImportList = function(source) {
    var n = source.GetAssociationCount();

    for (i = 0;  i < n; i++) {
        var other = source.GetAssociationAt(i).GetOtherSide();

        if (other.IsNavigable){
            CodeFactory.importPackage(other.Participant.Pathname);
        }
    }
}

CodeFactory.getAttrsCode = function(source, indent) {
    var sourceCode = "";
    var n = source.GetAttributeCount();
    println("[INFO] The number of attribute is " + n);
    var i;
    for (i = 0;  i < n; i++) {
        var attr = source.GetAttributeAt(i);
        println("[INFO] Start to parse attribute: " + attr.Name);

        visibility   = CodeFactory.getVisibility(attr);
        scope        = CodeFactory.getScope(attr);
        defaultValue = attr.InitialValue ? " = " + attr.InitialValue : "";

        sourceCode += indent + visibility + scope + CodeFactory.getType(attr) 
            + " " + attr.Name + defaultValue + ";\n";
        //println(sourceCode);
    }
   
    if (sourceCode.localeCompare("") != 0) {
        return sourceCode + "\n\n";
    } 
    return sourceCode;
}

CodeFactory.getMethodsCode = function(source, type, indent) {
    var sourceCode = "";
    var n = source.GetOperationCount();
    println("[INFO] The number of method is " + n);
    var i = 0;
    for (i=0; i < n; i++) {
        operation = source.GetOperationAt(i);
        println("[INFO] Start to parse method: " + operation.Name);

        methodComment = CodeFactory.comment(operation, gIndent);
	utAnno = operation.StereotypeName == "Test" ? gIndent + "@Test\n" : "";
        visibility = CodeFactory.getVisibility(operation);
        scope      = CodeFactory.getScope(operation);
        parameters = CodeFactory.getParameters(operation, indent);

        var returnType = "";
        if (operation.StereotypeName != "create") {
            returnType   = CodeFactory.getReturnType(operation);
        }

	if (operation.StereotypeName == "native") {
            visibility += "native ";
        }
        
        body       = CodeFactory.getMethodImpl(operation, gIndent + gIndent);
        if (body == "") {
            body = CodeFactory.getDefaultMethodImpl(returnType, gIndent + gIndent);
            //println("CodeFactory.getMethodsCode.body " + body);
        }

        sourceCode +=  methodComment + gIndent + gCommentEnd + utAnno + indent + visibility 
                + scope + returnType + operation.Name + "("  + parameters + ")";
        if (type == "interface" || operation.StereotypeName == "native") {
            sourceCode += ";\n\n";
        } else {
            sourceCode +=  "{\n" + body + indent + "}\n\n";
        }
    }
    return sourceCode;
}

CodeFactory.getVisibility = function(source) {
    var visibilityStr = "";
    var visibility;

    try {
        visibility = source.MOF_GetAttribute("Visibility");
    }catch(error){
        visibility = null;
    }
    
    switch(visibility){
            
        case "vkPackage":
            visibilityStr    = "internal";
            break;
            
        case "vkPrivate":
            visibilityStr    = "private";
            break;
            
        case "vkProtected":
            visibilityStr    = "protected";
            break;
            
        case "vkPublic":
        default:
            visibilityStr    = "public";
            break;
    }
    
    return visibilityStr + " ";
}

CodeFactory.getScope = function(source) {
    try {
        if (source.MOF_GetAttribute("OwnerScope") == "skClassifier") {
            return "static ";
        }
    }catch(error){
    }
    return "";
}

CodeFactory.getParameters = function(source, indent) {
    //println("Enter CodeFactory.getParameters")
    var paraSrcCode = "";

    try {
        var n = source.GetParameterCount();
        var i = 0;
        for (i=0; i<n; i++) {
            parameter = source.GetParameterAt(i);

            if (parameter.Name != "") {
                methodComment += indent + " * @param " + parameter.Name + " " 
                    + parameter.Documentation + "\n";
            }

            if (parameter.MOF_GetAttribute("DirectionKind") != "pdkReturn") {
                if (paraSrcCode != "") {
                    paraSrcCode += ", ";
                }
                paraSrcCode += CodeFactory.getType(parameter) + parameter.Name;
            }
        }
    } catch(error) {
    }
    //println(paraSrcCode)
    return paraSrcCode;
}

CodeFactory.getReturnType = function(source) {
    try {
        var n = source.GetParameterCount();
        var i = 0;
        for (i=0; i<n; i++) {
            parameter = source.GetParameterAt(i);
            if (parameter.MOF_GetAttribute("DirectionKind") == "pdkReturn") {
                return CodeFactory.getType(parameter);
            }
        }
    } catch(error) {
    }

    return "void ";
}

CodeFactory.getMethodImpl = function(source, indent) {
    if (!source.Documentation) return "";

    var src = null;
    var doc = source.Documentation.replace(/\r\n/g, "\n");
    doc = doc.replace(/\r/g, "\n");

    var lines = doc.split("\n");
    var i = 0;
    for(i=0; i<lines.length; i++) {
        if (src == null) {
            if (lines[i].indexOf(startLine) != -1) {
                src = "";
            }
        } else {
            if (lines[i].indexOf(endLine) != -1) {
                return src;
            }
            src += indent + lines[i].replace(/\\t/g, gIndent) + "\n";
        }
    }
    return "";
}

CodeFactory.getDefaultMethodImpl = function(returnType, indent) {
    //println("CodeFactory.getDefaultMethodImpl.returnType " + returnType); 
    var sourceCode = indent + "// TODO Auto-generated method stub\n";
    if (returnType == "" || returnType.indexOf("void") != -1) {
        return ""; 
    } else if (returnType.indexOf("boolean") != -1) {
        return sourceCode + indent + "return false;\n";
    } else if (returnType.indexOf("int") != -1 || returnType.indexOf("short") != -1 
            || returnType.indexOf("long") != -1) {
        return sourceCode + indent + "return 0;\n";
    } else if (returnType.indexOf("float") != -1 || returnType.indexOf("double") != -1) {
        return sourceCode + indent + "return 0.0;\n";
    }
    return sourceCode + indent + "return null;\n";
}

CodeFactory.fileComment = function() {
    var sourceCode = gCommentStart;
    sourceCode += " * Copyright " + StarUMLProject().Copyright;
    sourceCode += "\n *\n * @project " + StarUMLProject().Title;
    sourceCode += "\n *\n * @company " + StarUMLProject().Company;
    sourceCode += "\n *\n * @author " + StarUMLProject().Author;
    sourceCode += "\n" +gCommentEnd + "\n";
    print(sourceCode);
}

CodeFactory.commentLine = function(line, indent) {
    return indent + " * " + line + "\n";
}

CodeFactory.comment = function(source, indent) {
    var commtents = indent + gCommentStart;
    var doc = source.Documentation.replace(/\r\n/g, "\n");
    doc = doc.replace(/\r/g, "\n");
    //println("document = " + doc);

    var lines = doc.split("\n");
    var hasCode = false;
    for(i=0; i<lines.length; i++) {
        if (lines[i].indexOf(startLine) != -1) {
            hasCode = true;
        } else if (lines[i].indexOf(endLine) != -1) {
            hasCode = false;
        } else if (!hasCode) {
            commtents += CodeFactory.commentLine(lines[i], indent);             
        }
    }
    return commtents;
}

CodeFactory.getType = function(source) {
    if (source.TypeExpression != "") {
        return source.TypeExpression + " ";
    } else {
        return source.Type_.Name + " ";
    }
    return "";
}

CodeFactory.importPackage = function(Pathname) {
    var pathName = Pathname.substr(Pathname.indexOf("::", 2) + 2);
    pathName = pathName.replace(/::/g, ".");
    importsList += "import " + pathName + ";\n"
}

CodeFactory.filterClass = function(source) {
    if (candidateClass == "") {
        return true; 
    }

    var filters = candidateClass.split(",");
    for(i=0; i<filters.length; i++) {
        var pathName = current().Pathname;
        pathName = pathName.substr(pathName.indexOf("::", 2) + 2).replace(/::/g, ".");
        if (pathName.match(filters[i]) != null) {
            return true;
        }
    }
    return false;
}

CodeFactory.header = function() {
    CodeFactory.fileComment();

    if (packageInfo != "") {
        print("package " + packageInfo + ";\n\n")
    }

    if (importsList != "") {
        print(importsList + "\n\n")
    }
}

@>

<@REPEAT {R}::;UMLClassifier;;@>
<@SCRIPT
    packageInfo = "";
    importsList = "";

    if (CodeFactory.filterClass(current())) {
        println("[INFO] Start to parse " + current().Pathname);
        sourceCode = CodeFactory.getSourceCode(current());
    } else {
        sourceCode = null;
    }
    
    if (sourceCode){
        var fileName = CodeFactory.getFileName(current()); 

        fileBegin(fileName);

        CodeFactory.header();

        print(sourceCode);

        fileEnd();
    }
@>
<@ENDREPEAT@>

